/*下面的脚本是针对mysql某个表的写入性能测试的编写的，此处模拟的业务流程是并发登录mysql数据库，
然后一直往数据库中写入数据，写入100万条后，退出数据库的登录。测试的目标是找到该数据库中某个
表写入记录数的瓶颈点。
*/
int rc; 

int db_connection; //数据库连接

int query_result; // 查询结果集 MYSQL_RES

char** result_row; // 查询的数据行

 

char *server = "172.31.27.xx";

char *user = "user";

char *password = "password";

char *database = "ucenter";

int port = 3306;

int unix_socket = NULL; 

int flags = 1; 

vuser_init()

{

    // 找到libmysql.dll的所在位置.如果安装了mysql，并将dll文件导入了脚本内，可以直接load，不需要路径

    rc = lr_load_dll("libmysql.dll");

    if (rc != 0) {

    lr_error_message("Could not load libmysql.dll");

     lr_abort();

    }

 

    // 创建MySQL对象

    db_connection = mysql_init(NULL);

    if (db_connection == NULL) {

    lr_error_message("Insufficient memory");

     lr_abort();

    }

    // 连接到MySQL数据库

    rc = mysql_real_connect(db_connection, server, user, password, database, port, unix_socket, flags);

    if (rc == NULL) {

     lr_error_message("%s", mysql_error(db_connection));

    mysql_close(db_connection);

     lr_abort();

    }

    return 0;

}

Action()

{

    // 向数据库插入数据，{NewParam_1}_{NewParam}是参数化之后的参数

    lr_save_string (lr_eval_string("INSERT INTO ismxb_domainipicpstatus

 (service_code, datatype,ip,domain, servicetype, ipfp_status, icpstatus, license,organization, user_id, cur_time, scheme_status)

 VALUES ('56789', '1', '173.36.27.9','{NewParam_1}_{NewParam}', '24', NULL, '1', NULL, NULL, 'admin','2015-12-02 17:54:29', 1)")

                                ,"paramInsertQuery");  

    rc = mysql_query(db_connection, lr_eval_string("{paramInsertQuery}")); 

    if (rc!= 0) { 

    lr_error_message("%s", mysql_error(db_connection)); 

    mysql_close(db_connection); 

    lr_abort(); 

    } 

} 

vuser_end()

{

    // 释放MySQL资源 

    mysql_close(db_connection); 

   

    return 0;

}
